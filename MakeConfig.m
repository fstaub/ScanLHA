(* Extract SLHA informations from a SPheno.m into a YAML file *)
If[Length[$ScriptCommandLine]!=2,
    Print["Need (absolute) path to SPheno.m as argument."];
,
    file=$ScriptCommandLine[[2]];
];

If[Head[file]!=String || !FileExistsQ[file],
    Print["No valid SPheno.m given!"];
];

If[Get[file]===$Failed,
    Print["Failed to load ", file];
];

default[n_]:=ToString[n/.DefaultInputValues/.n->0]
dir = DirectoryName[file]
f=OpenWrite[dir <> "/config.yml", FormatType -> OutputForm]; 
write[s_]:=WriteString[f, s <> "\n"];

write["---"]
write["# This file was automatically generated by:"];
write["# mathicsscript MakeConfig.m " <> file];
write[""];

write["
spheno:
  binary: '../bin/SPheno'
  slhadir: '/dev/shm/slha'

blocks:
  - MODSEL:
      - parameter: model
        id: 1
        value: 1
        comment: 'high scale spheno version'
  - SPhenoInput:
      - {id: 1, value: -2, comment: 'error level'}
      - {id: 2, value: 1, comment: 'SPA conventions'}
      - {id: 11, value: 0, comment: 'calculate branching ratios'}
      - {id: 21, value: 0, comment: 'calculate cross section'}
      - id: 12
        value: 1.00000000E-04
        comment: 'write only branching ratios larger than this value'
  - SMINPUT:
      - {id: 2, value: 1.166379E-05, parameter: 'G_F', comment: 'Fermi constant'}
      - {id: 3, value: 1.184000E-01, parameter: 'alpha_s(MZ)', comment: 'alpha_s(MZ) MSbar'}
      - {id: 4, value: 9.118760E+01, parameter: 'M_Z', comment: 'Z-boson pole mass'}
      - {id: 5, value: 4.180000E+00, parameter: 'm_b(mb)', comment: 'm_b(mb) SM MSbar'}
      - {id: 6, value: 1.731000E+02, parameter: 'm_{Top}', comment: 'm_top(pole)'}
      - {id: 7, value: 1.776820E+00, parameter: 'm_{Tau}', comment: 'm_tau(pole)'}
"]

Do[
    block=PAR[[1]];
    paras=PAR[[2]];
    If[Head[paras]===List,
        If[Depth[paras]>3,
            Print["No Split-Scale input supported. Taking the first one."];
            paras=paras[[1]];
            DefaultInputValues=DefaultInputValues[1];
        ];
        write["  - "<>block<>":"];
        (
        write[
              "      - parameter: " <> ToString[#[[2]]]];
        write[
              "        id: " <> ToString[#[[1]]]];
        write[
              "        value: " <> default[#[[2]]]];
        )&/@paras;
    ];
,{PAR,{{"MINPAR",MINPAR},{"EXTPAR",EXTPAR}}}];

Close[f];
